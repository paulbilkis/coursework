#include <stdio.h>

int iscorrect(int *res, int el){
  int i, sum=0;
  for (i=0; i<5; i++)
    sum+=res[i];
  if ((sum + el) <= 7) return 1;
  else return 0;
}

int longest_solution (int **solutions, int n, int max){
  int i,j;
  for (i=0; i<n; i++){
    for (j=0; j<=max; j++){
      if (solutions[i][j] == 0) break;
    }
    if (j == max){
      return i;
    }
  }
}

int max=0;
int **d;
int size=0;

int recursive (int *p, int *res, int j, int cur){
  if (j >= 5) return 1;
  int i;
  for (i = j; i<5; i++){
    if (iscorrect (res, p[i])){
       if (cur > max)
       max = cur;
      res[cur] = p[i];
       d[size++] = (int**) malloc(sizeof(int*));
       memcpy(d[size-1], res, sizeof(int)*(cur+1));

      
      if (recursive (p, res, i+1, cur+1)) return 1;
      res[cur] = 0; //backtrace
    }
  }

  return 0;
}

int main (void){
  int p[5] = {1,2,3,4,5};
  int res[5]={0,0,0,0,0};
  recursive(p, res, 0, 0);
  printf ("%d", longest_solution(d, size, max));
}
